#!/usr/bin/env node
var debug = require('debug')('my-application');
var app = require('../app');
var MyoReader = require('../myo/myo');
var myoInstance;
var currentSocket = null;

var devices = [];

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
  myoInstance = new MyoReader(ServerCallbacks, true);
});

var io = require('socket.io')(server);

io.on('connection',function(socket){
  devices.push({z: 0, socket: socket});
  currentSocket = socket;

  socket.on('awaiting-position', function() {
    myoInstance.awaitPosition();
    console.log('waiting for position for device: ' + socket.id);
  });

  socket.on('disconnect', function(){
    var i;
    for (i = 0; i < devices.length; i++){
      if (socket.id === devices[i].socket.id)
        break;
    }
    devices = devices.splice(i,1);
    myoInstance.setDevices(devices);
  });
});

var addDevice = function(z) {
  //hack TODO: Figure out a better way to implement this
  console.log('add device at :' + z);
  devices[devices.length-1].z = z; //set position of last added device (since only one is handled at time) -- FIX THIS HACK LATER
  myoInstance.setDevices(devices);
  currentSocket.emit('position-received', function() {
  });
};

var ServerCallbacks = { //TODO: Implement all callbacks to be used by MyoReader
  addDevice: addDevice,
  heartbeat: null,
  increaseVolume: null,
  decreaseVolume: null,
  increaseTempo: null,
  decreaseTempo: null
};
